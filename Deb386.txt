
 1. About Deb386

  Deb386 is a PL0 debugger. It's using DebugR.bin, a variant of Debug/X,
 as the debugger core. Once installed, the debugger may be activated by a
 protected-mode program running at privilege level 0 ( also called "ring 0" ).
 Once being activated, the debugger prompt will appear if an exception has
 been detected.
  Deb386 may be used to debug HDPMI (the HX DPMI host), Jemmex/Jemm386
 ( v86-mode monitor programs ) or even Windows 3.1 or 9X.


 2. Usage

 Deb386 understands the following cmdline options:

   -2   displays on secondary monitor ( if KBDIN/VIOOUT is active )
   -i   install
   -b   stop at init
   -c:n COM port to use ( if AUXIN/AUXOUT is active )
   -h   use HDPMI mode switches for I/O ( if KBDIN/VIOOUT is active )
   -n   make debugger invisible to Int 41h
   -s   single mode
   -u   uninstall

 Option -i has an optional argument that will be passed to the debugger core
 DebugR.


 3. Details

 - The debugger uses the interrupt 68h real-mode API for ring0-debugger
   detection and initialization ( the same API is used by MS WDEB386 and
   386SWAT ). It stays in conventional memory and so doesn't have to fiddle
   with paging so far as the ring0 host "identity-maps" this part of memory.
    Note that if WDEB386 or 386SWAT are running, Deb386 will detect that and
   not install itself.

 - Regarding I/O there are currently two possibilities: it's either done
   through a serial line or using low-level video/keyboard code:

   a) I/O through a serial connection (COMx). This requires to assemble Deb386
     with options -DAUXOUT=1 and -DAUXIN=1 ( see Makefile for details ). The
     default for the COM port is COM1, may be changed with option /C.

     As an example, if DOS is running in the Qemu emulator, one may connect the
     emulated COM port to the terminal, using Qemu cmdline options:

    -chardev stdio,id=char0,signal=off -serial chardev:char0

   b) I/O through low-level video/keyboard code. This requires to assemble
     Deb386 with options -DVIOOUT=1 and -DKBDIN=1. The output may be directed
     to a secondary ( monochrome ) adapter with cmdline option /2. The input
     is a slight problem, since key translations have to be done by the
     debugger; there exist 2 translation tables, for US or GR keyboards, default
     is GR ( see below how to set US ).

 - The exceptions that may wake up the debugger are 0, 1, 3, 6, 0Dh and 0Eh,
   in protected-mode only. No other events are handled. The debugger core
   DebugR does ignore all exceptions coming from v86-mode. So it's not possible
   to debug DOS "real-mode" applications with Deb386.

 - As default, Deb386 is visible to protected-mode Int 41h. So it will be
   detected by protected-mode programs, including the HX program loaders
   ( which will then emit a breakpoint at program start ). If this is to be
   avoided, add the /n option.

 - The single mode option is useful if there exist the possibility that
   multiple ring0 protected-mode applications may try to use the debugger
   at the same time. This may happen if both a VCPI host and VCPI client
   detect the presence of the debugger. Single mode will make Deb386 hide
   itself once it has been initialized for protected-mode.

 - Deb386 doesn't use the 80386+ debug registers; to set a breakpoint it
   has to write an int3 instruction. If the memory page is readonly and the
   CR0 WP bit is set, a page fault will occur. To avoid this error, one has
   to clear the WP bit before the debug session; see tool ResWP.exe.

 - If the DPMI host runs clients with IOPL 0 ( there exists HDPMI variants that
   do that ), the clients will trigger an exception 0Dh if instructions CLI/STI
   or IN/INS/OUT/OUTS for trapped ports are executed. The debugger core DebugR
   does ignore such exceptions.

 - The debugger core DebugR has absolutely no knowledge about Windows or DOS
   peculiarities. So, for example, it cannot distinguish "invalid page faults"
   and "valid" ones.

 - HDPMI ring0 code runs with interrupts disabled. There may be some places
   that are untraceable, assuming that the code isn't interrupted. Also,
   mode-switching code cannot be single-stepped - so stop single-stepping
   if instructions like LIDT or LTR appear in the disassembly.

 - When uninstalling, there's no reliable way for Deb386 to detect if the
   program that is currently debugged is still running ( with a IDT that has
   been modified by Deb386 ). So always first uninstall the debugged program,
   then Deb386.

 - Using option /b the debugger will stop immediately after initialization.
   HDPMI at this stage is still located in conventional memory.

 - There's a device driver variant of Deb386, Deb386.sys. It's meant to debug
   Jemm386/JemmEx. Deb386.sys always runs with "single mode" enabled, that is,
   it will become active for ONE program only. Note that the standard versions
   of Jemm386/JemmEx aren't kernel debugger aware, they won't activate it. So
   to make the debugger stop in Jemm during its initialization, you'll have to
   create a version that communicates with the kernel debugger.

 - Since Deb386 uses the same interface than WDEB386 does, it might be used as
   a ( rather restricted ) Win3x/Win9x kernel debugger. In any case, you'll
   have to feed DebugR with the -m option ( set as argument for -i ) to make it
   assume that the master PIC vectors don't overlap with exception vectors.


 4, Requirements to create the Binaries

   - JWasm.
   - DebugR - this Debug/X variant is included as a binary.
   - if debug displays are to be activated, JWasm v2.17+ is needed.
   - make utility.

   "nmake aux=1" will create Deb386.exe with AUXIN/AUXOUT enabled.
   "nmake kbd=us" will create Deb386.exe with US kbd layout support.


 5. License

 Deb386 is released under the MIT license. See license.txt for details.

 Andreas Grech
